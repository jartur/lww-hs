-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/jartur/lww-hs#readme</a>
@package lww-hs
@version 0.1.0.0

module LWWSet

-- | The LWW-Element-Set datastructure
data LWWSet a

-- | Reduce <a>LWWSet</a> to a normal <a>Set</a> which contains only
--   non-deleted elements
toSet :: (Ord a) => LWWSet a -> Set a

-- | Here we use the fact that <a>LWWSet</a> is a <a>Monoid</a>
merge :: (Ord a) => LWWSet a -> LWWSet a -> LWWSet a

-- | Construct an empty <a>LWWSet</a>, also from <a>Monoid</a> instance
empty :: (Ord a) => LWWSet a

-- | Construct an <a>LWWSet</a> with a single element
unit :: (Ord a) => a -> TimeStamp -> LWWSet a

-- | Check if the element is in the <a>LWWSet</a>, which means it was added
--   the latest add timestamp is greater that the last removal if any. Here
--   we are biased to removal.
query :: (Ord a) => LWWSet a -> a -> Bool

-- | Add new element to the <a>LWWSet</a>
insert :: (Ord a) => LWWSet a -> a -> TimeStamp -> LWWSet a

-- | Remove an element from the <a>LWWSet</a>
remove :: (Ord a) => LWWSet a -> a -> TimeStamp -> LWWSet a
instance GHC.Show.Show a => GHC.Show.Show (LWWSet.LWWSet a)
instance GHC.Show.Show a => GHC.Show.Show (LWWSet.TimeStampedSet a)
instance GHC.Classes.Ord a => GHC.Base.Monoid (LWWSet.LWWSet a)
instance (GHC.Classes.Eq a, GHC.Classes.Ord a) => GHC.Classes.Eq (LWWSet.LWWSet a)
instance GHC.Classes.Ord a => GHC.Base.Monoid (LWWSet.TimeStampedSet a)
